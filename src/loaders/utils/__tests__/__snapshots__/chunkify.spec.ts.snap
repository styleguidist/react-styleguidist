// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should even parse examples with custom extensions 1`] = `
Array [
  Object {
    "content": "Custom extensions",
    "type": "markdown",
  },
  Object {
    "content": "<AppButton>Example in vue</AppButton>",
    "settings": Object {},
    "type": "code",
  },
]
`;

exports[`should parse examples settings correctly 1`] = `
Array [
  Object {
    "content": "Pass props to CodeRenderer",
    "type": "markdown",
  },
  Object {
    "content": "<h1>Hello Markdown!</h1>",
    "settings": Object {
      "showcode": true,
    },
    "type": "code",
  },
  Object {
    "content": "<h1>Example in frame and Without editor</h1>",
    "settings": Object {
      "frame": Object {
        "width": "400px",
      },
    },
    "type": "code",
  },
  Object {
    "content": "Pass props to PreviewRenderer",
    "type": "markdown",
  },
  Object {
    "content": "<h2>Hello Markdown!</h2>",
    "settings": Object {
      "noeditor": true,
    },
    "type": "code",
  },
  Object {
    "content": "\`\`\`jsx
<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h2</span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">This is Highlighted!</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h2</span><span class=\\"token punctuation\\">></span></span>
\`\`\`",
    "type": "markdown",
  },
]
`;

exports[`should parse undefined custom extensions without throwing 1`] = `
Array [
  Object {
    "content": "Undefined extensions (default)",
    "type": "markdown",
  },
  Object {
    "content": "<AppButton>Example in jsx with undefined extensions</AppButton>",
    "settings": Object {},
    "type": "code",
  },
  Object {
    "content": "\`\`\`pizza
<AppButton>Example in pizza with undefined extensions (test double)</AppButton>
\`\`\`",
    "type": "markdown",
  },
]
`;

exports[`should separate Markdown and component examples 1`] = `
Array [
  Object {
    "content": "# Header

Text with *some* **formatting** and a [link](/foo).

<div>And some HTML.</div>

![Image](/bar.png)

This code example should be rendered as a playground:",
    "type": "markdown",
  },
  Object {
    "content": "<h1>Hello Markdown!</h1>",
    "settings": Object {},
    "type": "code",
  },
  Object {
    "content": "Text with some \`code\` (playground too).",
    "type": "markdown",
  },
  Object {
    "content": "<h2>Hello Markdown!</h2>",
    "settings": Object {},
    "type": "code",
  },
  Object {
    "content": "And some language and modifier (playground again):",
    "type": "markdown",
  },
  Object {
    "content": "<h3>Hello Markdown!</h3>",
    "settings": Object {
      "noeditor": true,
    },
    "type": "code",
  },
  Object {
    "content": "This should be just highlighted:

\`\`\`jsx
<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h4</span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">Hello Markdown!</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h4</span><span class=\\"token punctuation\\">></span></span>
\`\`\`

This should be highlighted too:

\`\`\`html
<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h5</span><span class=\\"token punctuation\\">></span></span>Hello Markdown!<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h5</span><span class=\\"token punctuation\\">></span></span>
\`\`\`",
    "type": "markdown",
  },
]
`;
